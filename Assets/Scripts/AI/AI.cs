using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Base class for all AI controlled objects.
/// </summary>
[RequireComponent(typeof(Rigidbody2D), typeof(SpriteRenderer))]
public abstract class AI : MonoBehaviour
{
    [Header("Generic AI")]
    [SerializeField] float speed = 1f;
    protected Rigidbody2D rb;
    Node currentNode;
    List<Node> path = new List<Node>();
    
    /// <summary>
    /// Sets <c>rb</c> to a reference of
    /// the object's <c>Rigidbody2D</c> component.
    /// </summary>
    protected virtual void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
    }
    
    /// <summary>
    /// Selects random <c>Node</c> in scene and
    /// sets it to the <c>currentNode</c>.
    /// </summary>
    protected virtual void Start()
    {
        Node[] nodes = FindObjectsOfType<Node>();
        if (nodes.Length > 0)
        {
            currentNode = nodes[Random.Range(0, nodes.Length)];
        }
    }
    
    /// <summary>
    /// Moves the AI the <c>Nodes</c> in the scene to an end point.
    /// <para>
    /// Moves through a path generated by <c>AStarManager</c> to reach a randomly generated end <c>Node</c>.
    /// If the path has been completed or one does not currently exist, it creates a new path to a new
    /// random end <c>Node</c>.
    /// </para>
    /// <see cref="AStarManager.cs"/>
    /// </summary>
    protected void CreatePath()
    {
        if (!currentNode) return;
        if (path.Count > 0)
        {
            int x = 0;

            MoveTo(path[x].transform.position);
            
            if (Vector2.Distance(transform.position, path[x].transform.position) < 0.1f)
            {
                currentNode = path[x];
                path.RemoveAt(x);
            }
        }
        else
        {
            Node[] nodes = FindObjectsOfType<Node>();
            while (path == null || path.Count == 0)
            {
                path = AStarManager.instance.GeneratePath(currentNode, nodes[Random.Range(0, nodes.Length)]);
            }
        }
    }
    
    /// <summary>
    /// Sets velocity to the direction of <c>destination</c>.
    /// </summary>
    /// <param name="destination"></param>
    public void MoveTo(Vector2 destination)
    {
        Vector2 direction = (destination - new Vector2(transform.position.x, transform.position.y)).normalized;
        rb.velocity = direction * speed;
    }
}
